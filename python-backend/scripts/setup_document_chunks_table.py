#!/usr/bin/env python3
"""
Script to create the document_chunks table in Supabase database.
This script should be run if the document_chunks table is missing from your database.
"""

import os
import sys
import logging
from pathlib import Path

# Add the parent directory to the path so we can import our modules
sys.path.append(str(Path(__file__).parent.parent))

from app.utils.supabase_client import get_supabase_client

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_document_chunks_table():
    """
    Create the document_chunks table and related indexes.
    """
    try:
        supabase = get_supabase_client()
        
        # SQL to create the document_chunks table
        create_table_sql = """
        -- Create document_chunks table if it doesn't exist
        CREATE TABLE IF NOT EXISTS document_chunks (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            document_id BIGINT NOT NULL REFERENCES documents(id) ON DELETE CASCADE,
            content TEXT NOT NULL,
            embedding VECTOR(1536),
            metadata JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """
        
        # SQL to create indexes
        create_indexes_sql = """
        -- Create indexes for better performance
        CREATE INDEX IF NOT EXISTS idx_document_chunks_document_id ON document_chunks(document_id);
        CREATE INDEX IF NOT EXISTS idx_document_chunks_embedding ON document_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
        """
        
        # SQL to enable RLS and create policy
        create_rls_sql = """
        -- Enable Row Level Security
        ALTER TABLE document_chunks ENABLE ROW LEVEL SECURITY;
        
        -- Create policy for authenticated users
        CREATE POLICY "Allow full access to authenticated users" ON document_chunks FOR ALL TO authenticated USING (true);
        """
        
        logger.info("Creating document_chunks table...")
        
        # Execute the SQL commands
        result = supabase.rpc('exec_sql', {'sql': create_table_sql}).execute()
        
        if hasattr(result, 'error') and result.error:
            logger.error(f"Error creating table: {result.error}")
            return False
        
        logger.info("Creating indexes...")
        result = supabase.rpc('exec_sql', {'sql': create_indexes_sql}).execute()
        
        if hasattr(result, 'error') and result.error:
            logger.error(f"Error creating indexes: {result.error}")
            return False
        
        logger.info("Setting up Row Level Security...")
        result = supabase.rpc('exec_sql', {'sql': create_rls_sql}).execute()
        
        if hasattr(result, 'error') and result.error:
            logger.error(f"Error setting up RLS: {result.error}")
            return False
        
        logger.info("document_chunks table created successfully!")
        return True
        
    except Exception as e:
        logger.error(f"Error creating document_chunks table: {e}")
        return False

def check_table_exists():
    """
    Check if the document_chunks table exists.
    """
    try:
        supabase = get_supabase_client()
        
        # Try to query the table
        result = supabase.table("document_chunks").select("id").limit(1).execute()
        
        if hasattr(result, 'error') and result.error:
            if 'does not exist' in str(result.error):
                return False
            else:
                logger.error(f"Error checking table: {result.error}")
                return False
        
        return True
        
    except Exception as e:
        logger.error(f"Error checking if table exists: {e}")
        return False

def main():
    """
    Main function to set up the document_chunks table.
    """
    logger.info("Checking if document_chunks table exists...")
    
    if check_table_exists():
        logger.info("document_chunks table already exists!")
        return
    
    logger.info("document_chunks table does not exist. Creating it...")
    
    if create_document_chunks_table():
        logger.info("Setup completed successfully!")
    else:
        logger.error("Setup failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
