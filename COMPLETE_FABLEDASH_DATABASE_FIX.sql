-- COMPLETE FABLEDASH DATABASE FIX SCRIPT
-- This script will create ALL required tables for the FableDash application
-- Run this ENTIRE script in your Supabase SQL Editor

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "vector";

-- Create update function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 1. CLIENTS TABLE (Base table for everything)
CREATE TABLE IF NOT EXISTS clients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    company TEXT,
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. AGENTS TABLE
CREATE TABLE IF NOT EXISTS agents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    client_id BIGINT REFERENCES clients(id),
    is_parent BOOLEAN DEFAULT FALSE,
    parent_id BIGINT REFERENCES agents(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. TASK STATUSES TABLE (Required for tasks)
CREATE TABLE IF NOT EXISTS task_statuses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    color TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. TASKS TABLE
CREATE TABLE IF NOT EXISTS tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT,
    client_id BIGINT REFERENCES clients(id),
    status_id BIGINT NOT NULL REFERENCES task_statuses(id),
    due_date DATE,
    priority INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. TASK COMMENTS TABLE
CREATE TABLE IF NOT EXISTS task_comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 6. TASK ATTACHMENTS TABLE
CREATE TABLE IF NOT EXISTS task_attachments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id BIGINT NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
    filename TEXT NOT NULL,
    file_type TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    content_type TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. DOCUMENTS TABLE (Fix existing or create new)
CREATE TABLE IF NOT EXISTS documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agent_id BIGINT NOT NULL,
    filename TEXT NOT NULL,
    file_type TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    content_type TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add missing columns to documents table if it exists
DO $$ 
BEGIN
    -- agent_id
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'agent_id' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN agent_id BIGINT NOT NULL DEFAULT 0;
    END IF;
    
    -- filename
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'filename' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN filename TEXT NOT NULL DEFAULT 'unknown';
    END IF;
    
    -- file_type
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'file_type' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN file_type TEXT NOT NULL DEFAULT 'unknown';
    END IF;
    
    -- file_size
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'file_size' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN file_size BIGINT NOT NULL DEFAULT 0;
    END IF;
    
    -- content_type
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'content_type' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN content_type TEXT NOT NULL DEFAULT 'application/octet-stream';
    END IF;
    
    -- created_at
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'created_at' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
    END IF;
    
    -- updated_at
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'documents' AND column_name = 'updated_at' AND table_schema = 'public') THEN
        ALTER TABLE documents ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
    END IF;
END $$;

-- 8. DOCUMENT CHUNKS TABLE
CREATE TABLE IF NOT EXISTS document_chunks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_id BIGINT NOT NULL,
    content TEXT NOT NULL,
    embedding VECTOR(1536),
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 9. CHATS TABLE
CREATE TABLE IF NOT EXISTS chats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    agent_id BIGINT NOT NULL,
    title TEXT NOT NULL,
    parent_chat_id BIGINT REFERENCES chats(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 10. MESSAGES TABLE
CREATE TABLE IF NOT EXISTS messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    chat_id BIGINT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('system', 'user', 'assistant')),
    content TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add foreign key constraints (only if they don't exist)
DO $$
BEGIN
    -- Documents -> Agents
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY' AND table_name = 'documents' AND constraint_name = 'documents_agent_id_fkey') THEN
        ALTER TABLE documents ADD CONSTRAINT documents_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE;
    END IF;
    
    -- Document chunks -> Documents
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY' AND table_name = 'document_chunks' AND constraint_name = 'document_chunks_document_id_fkey') THEN
        ALTER TABLE document_chunks ADD CONSTRAINT document_chunks_document_id_fkey FOREIGN KEY (document_id) REFERENCES documents(id) ON DELETE CASCADE;
    END IF;
    
    -- Chats -> Agents
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY' AND table_name = 'chats' AND constraint_name = 'chats_agent_id_fkey') THEN
        ALTER TABLE chats ADD CONSTRAINT chats_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES agents(id) ON DELETE CASCADE;
    END IF;
    
    -- Messages -> Chats
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_type = 'FOREIGN KEY' AND table_name = 'messages' AND constraint_name = 'messages_chat_id_fkey') THEN
        ALTER TABLE messages ADD CONSTRAINT messages_chat_id_fkey FOREIGN KEY (chat_id) REFERENCES chats(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_agents_client_id ON agents(client_id);
CREATE INDEX IF NOT EXISTS idx_agents_parent_id ON agents(parent_id);
CREATE INDEX IF NOT EXISTS idx_chats_agent_id ON chats(agent_id);
CREATE INDEX IF NOT EXISTS idx_chats_parent_chat_id ON chats(parent_chat_id);
CREATE INDEX IF NOT EXISTS idx_messages_chat_id ON messages(chat_id);
CREATE INDEX IF NOT EXISTS idx_documents_agent_id ON documents(agent_id);
CREATE INDEX IF NOT EXISTS idx_document_chunks_document_id ON document_chunks(document_id);
CREATE INDEX IF NOT EXISTS idx_tasks_client_id ON tasks(client_id);
CREATE INDEX IF NOT EXISTS idx_tasks_status_id ON tasks(status_id);
CREATE INDEX IF NOT EXISTS idx_task_comments_task_id ON task_comments(task_id);
CREATE INDEX IF NOT EXISTS idx_task_attachments_task_id ON task_attachments(task_id);

-- Create vector index for embeddings
CREATE INDEX IF NOT EXISTS idx_document_chunks_embedding ON document_chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Insert default task statuses
INSERT INTO task_statuses (name, color) VALUES
    ('To Do', '#3498db'),
    ('In Progress', '#f39c12'),
    ('Review', '#9b59b6'),
    ('Done', '#2ecc71')
ON CONFLICT DO NOTHING;

-- Enable Row Level Security
ALTER TABLE agents ENABLE ROW LEVEL SECURITY;
ALTER TABLE chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE document_chunks ENABLE ROW LEVEL SECURITY;
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_statuses ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_attachments ENABLE ROW LEVEL SECURITY;

-- Create policies (if they don't exist)
DO $$
BEGIN
    -- Agents
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'agents' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON agents FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Chats
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'chats' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON chats FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Messages
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'messages' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON messages FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Documents
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'documents' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON documents FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Document chunks
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'document_chunks' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON document_chunks FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Clients
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'clients' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON clients FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Task statuses
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'task_statuses' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON task_statuses FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Tasks
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'tasks' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON tasks FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Task comments
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'task_comments' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON task_comments FOR ALL TO authenticated USING (true);
    END IF;
    
    -- Task attachments
    IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE tablename = 'task_attachments' AND policyname = 'Allow full access to authenticated users') THEN
        CREATE POLICY "Allow full access to authenticated users" ON task_attachments FOR ALL TO authenticated USING (true);
    END IF;
END $$;

-- Create triggers for updated_at
DO $$
BEGIN
    -- Agents
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_agents_updated_at' AND event_object_table = 'agents') THEN
        CREATE TRIGGER update_agents_updated_at BEFORE UPDATE ON agents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Chats
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_chats_updated_at' AND event_object_table = 'chats') THEN
        CREATE TRIGGER update_chats_updated_at BEFORE UPDATE ON chats FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Documents
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_documents_updated_at' AND event_object_table = 'documents') THEN
        CREATE TRIGGER update_documents_updated_at BEFORE UPDATE ON documents FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Clients
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_clients_updated_at' AND event_object_table = 'clients') THEN
        CREATE TRIGGER update_clients_updated_at BEFORE UPDATE ON clients FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Task statuses
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_task_statuses_updated_at' AND event_object_table = 'task_statuses') THEN
        CREATE TRIGGER update_task_statuses_updated_at BEFORE UPDATE ON task_statuses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Tasks
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_tasks_updated_at' AND event_object_table = 'tasks') THEN
        CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON tasks FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Task comments
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_task_comments_updated_at' AND event_object_table = 'task_comments') THEN
        CREATE TRIGGER update_task_comments_updated_at BEFORE UPDATE ON task_comments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
    
    -- Task attachments
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'update_task_attachments_updated_at' AND event_object_table = 'task_attachments') THEN
        CREATE TRIGGER update_task_attachments_updated_at BEFORE UPDATE ON task_attachments FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    END IF;
END $$;

-- Insert sample data for testing
INSERT INTO clients (name, email, phone, company, notes) VALUES
    ('John Doe', 'john@example.com', '+1234567890', 'Acme Corp', 'Primary contact for Acme Corp'),
    ('Jane Smith', 'jane@techstart.com', '+1987654321', 'TechStart Inc', 'CTO at TechStart'),
    ('Bob Johnson', 'bob@consulting.com', '+1122334455', 'Johnson Consulting', 'Independent consultant')
ON CONFLICT DO NOTHING;

-- Insert sample agents
INSERT INTO agents (name, description, client_id, is_parent, parent_id) VALUES
    ('General Assistant', 'Main AI assistant for general queries', 1, true, NULL),
    ('Technical Support', 'Specialized in technical support', 1, false, 1),
    ('Sales Assistant', 'Handles sales inquiries and lead qualification', 2, true, NULL),
    ('Customer Service', 'Provides customer support and handles complaints', 3, false, 3)
ON CONFLICT DO NOTHING;

-- Insert sample tasks
INSERT INTO tasks (title, description, client_id, status_id, due_date, priority) VALUES
    ('Setup new client onboarding', 'Create onboarding process for new client', 1, 1, '2025-06-01', 1),
    ('Review technical documentation', 'Review and update technical docs', 2, 2, '2025-05-30', 2),
    ('Prepare sales presentation', 'Create presentation for upcoming client meeting', 2, 1, '2025-05-28', 1),
    ('Customer feedback analysis', 'Analyze recent customer feedback and create report', 3, 3, '2025-06-05', 3)
ON CONFLICT DO NOTHING;

-- Verify all tables exist
SELECT 
    'All Tables Created Successfully!' as status,
    string_agg(table_name, ', ') as tables
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('agents', 'chats', 'messages', 'documents', 'document_chunks', 'clients', 'tasks', 'task_statuses', 'task_comments', 'task_attachments');

-- Show table counts
SELECT 
    'clients' as table_name, 
    count(*) as record_count 
FROM clients
UNION ALL
SELECT 
    'agents' as table_name, 
    count(*) as record_count 
FROM agents
UNION ALL
SELECT 
    'task_statuses' as table_name, 
    count(*) as record_count 
FROM task_statuses
UNION ALL
SELECT 
    'tasks' as table_name, 
    count(*) as record_count 
FROM tasks;
